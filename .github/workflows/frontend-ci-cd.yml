name: Frontend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Fin-Frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Fin-Frontend/**'
      - '.github/workflows/frontend-ci-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  NODE_VERSION: '18.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/fintech-frontend

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: Fin-Frontend/package-lock.json
        
    - name: Install dependencies
      working-directory: Fin-Frontend
      run: npm ci
      
    - name: Lint code
      working-directory: Fin-Frontend
      run: npm run lint
      
    - name: Run tests
      working-directory: Fin-Frontend
      run: npm test -- --coverage
      
    - name: Upload test coverage
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: Fin-Frontend/coverage
        
    - name: Build project
      working-directory: Fin-Frontend
      run: npm run build
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: Fin-Frontend/dist

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Run npm audit
      working-directory: Fin-Frontend
      run: npm audit --audit-level=high
      continue-on-error: true
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run Lighthouse CI
      uses: treosh/lighthouse-ci-action@v10
      with:
        urls: |
          https://staging.fintech.example.com
        uploadArtifacts: true
        temporaryPublicStorage: true

  build-and-push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Log in to the container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=short
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./Fin-Frontend
        file: ./Fin-Frontend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set context
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/development/frontend/
        kubectl set image deployment/fintech-frontend fintech-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/fintech-frontend --timeout=180s
        
    - name: Verify Deployment
      run: |
        kubectl get pods -l app=fintech-frontend
        kubectl get service fintech-frontend
        
    - name: Notify on Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: 'Development Deployment'
        SLACK_MESSAGE: 'Frontend has been deployed to Development environment'
        SLACK_COLOR: good

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set context
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/staging/frontend/
        kubectl set image deployment/fintech-frontend fintech-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/fintech-frontend --timeout=180s
        
    - name: Verify Deployment
      run: |
        kubectl get pods -l app=fintech-frontend
        kubectl get service fintech-frontend
        
    - name: Notify on Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: 'Staging Deployment'
        SLACK_MESSAGE: 'Frontend has been deployed to Staging environment'
        SLACK_COLOR: good

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set context
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/production/frontend/
        kubectl set image deployment/fintech-frontend fintech-frontend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/fintech-frontend --timeout=180s
        
    - name: Verify Deployment
      run: |
        kubectl get pods -l app=fintech-frontend
        kubectl get service fintech-frontend
        
    - name: Notify on Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: 'Production Deployment'
        SLACK_MESSAGE: 'Frontend has been deployed to Production environment'
        SLACK_COLOR: good