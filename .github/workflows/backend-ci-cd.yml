name: Backend CI/CD

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'Fin-Backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'Fin-Backend/**'
      - '.github/workflows/backend-ci-cd.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
  DOTNET_NOLOGO: true
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/fintech-backend

jobs:
  build-and-test:
    name: Build & Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore Fin-Backend/FinTech.WebAPI.csproj
      
    - name: Build
      run: dotnet build Fin-Backend/FinTech.WebAPI.csproj --configuration Release --no-restore
      
    - name: Start Docker Test Environment
      run: docker-compose -f Fin-Backend.Tests/docker-compose.test.yml up -d
      
    - name: Run Tests
      run: dotnet test Fin-Backend.Tests/Fin-Backend.Tests.csproj --configuration Release --no-build --verbosity normal /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
      
    - name: Stop Docker Test Environment
      run: docker-compose -f Fin-Backend.Tests/docker-compose.test.yml down
      
    - name: Upload Test Results
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: Fin-Backend.Tests/TestResults/**
        
    - name: Publish code coverage summary
      uses: irongut/CodeCoverageSummary@v1.3.0
      with:
        filename: '**/coverage.cobertura.xml'
        badge: true
        format: 'markdown'
        output: 'both'
        
    - name: Add Coverage PR Comment
      uses: marocchino/sticky-pull-request-comment@v2
      if: github.event_name == 'pull_request'
      with:
        recreate: true
        path: code-coverage-results.md

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Run OWASP ZAP Scan
      uses: zaproxy/action-baseline@v0.9.0
      with:
        target: 'https://example.com'  # Replace with your staging URL for PR scans
        
    - name: SonarCloud Scan
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        projectBaseDir: Fin-Backend/
        
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/dotnet@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high

  build-and-push-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [build-and-test, security-scan]
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Log in to the container registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,format=short
          
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./Fin-Backend
        file: ./Fin-Backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-development:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set context
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_DEV }}
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/development/
        kubectl set image deployment/fintech-backend fintech-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/fintech-backend --timeout=180s
        
    - name: Run Database Migrations
      run: |
        kubectl exec -it $(kubectl get pods -l app=fintech-backend -o jsonpath="{.items[0].metadata.name}") -- dotnet ef database update
        
    - name: Verify Deployment
      run: |
        kubectl get pods -l app=fintech-backend
        
    - name: Notify on Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: 'Development Deployment'
        SLACK_MESSAGE: 'Backend has been deployed to Development environment'
        SLACK_COLOR: good

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push-image
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set context
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING }}
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/staging/
        kubectl set image deployment/fintech-backend fintech-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/fintech-backend --timeout=180s
        
    - name: Run Database Migrations
      run: |
        kubectl exec -it $(kubectl get pods -l app=fintech-backend -o jsonpath="{.items[0].metadata.name}") -- dotnet ef database update
        
    - name: Verify Deployment
      run: |
        kubectl get pods -l app=fintech-backend
        
    - name: Notify on Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: 'Staging Deployment'
        SLACK_MESSAGE: 'Backend has been deployed to Staging environment'
        SLACK_COLOR: good

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      
    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      
    - name: Set context
      uses: azure/k8s-set-context@v3
      with:
        kubeconfig: ${{ secrets.KUBE_CONFIG_PROD }}
        
    - name: Deploy to Kubernetes
      run: |
        kubectl apply -f k8s/production/
        kubectl set image deployment/fintech-backend fintech-backend=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:sha-${{ github.sha }}
        kubectl rollout status deployment/fintech-backend --timeout=180s
        
    - name: Run Database Migrations
      run: |
        kubectl exec -it $(kubectl get pods -l app=fintech-backend -o jsonpath="{.items[0].metadata.name}") -- dotnet ef database update
        
    - name: Verify Deployment
      run: |
        kubectl get pods -l app=fintech-backend
        
    - name: Notify on Slack
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_TITLE: 'Production Deployment'
        SLACK_MESSAGE: 'Backend has been deployed to Production environment'
        SLACK_COLOR: good