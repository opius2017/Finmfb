version: '3.8'

services:
  # SQL Server database
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: finmfb-db
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourStrongPassword123!
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - db-data:/var/opt/mssql
    networks:
      - finmfb-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrongPassword123! -Q 'SELECT 1' || exit 1"]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 3s
  
  # Redis for distributed caching
  redis:
    image: redis:alpine
    container_name: finmfb-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - finmfb-network
    command: redis-server --requirepass RedisStrongPassword123!
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "RedisStrongPassword123!", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
  
  # RabbitMQ for messaging
  rabbitmq:
    image: rabbitmq:3-management
    container_name: finmfb-rabbitmq
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=RabbitMQStrongPassword123!
    ports:
      - "5672:5672"  # AMQP port
      - "15672:15672"  # Management UI
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - finmfb-network
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
  
  # Backend API
  api:
    build:
      context: .
      dockerfile: Fin-Backend/Dockerfile
    container_name: finmfb-api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__DefaultConnection=Server=db;Database=FinTechDB;User Id=sa;Password=YourStrongPassword123!;TrustServerCertificate=True;
      - Redis__ConnectionString=redis:6379,password=RedisStrongPassword123!
      - RabbitMQ__ConnectionString=amqp://admin:RabbitMQStrongPassword123!@rabbitmq:5672/
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    ports:
      - "5000:80"
      - "5001:443"
    networks:
      - finmfb-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
  
  # API Gateway (Ocelot)
  api-gateway:
    build:
      context: .
      dockerfile: Fin-Gateway/Dockerfile
    container_name: finmfb-gateway
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
    ports:
      - "8080:80"
      - "8081:443"
    depends_on:
      api:
        condition: service_healthy
    networks:
      - finmfb-network
  
  # Frontend
  frontend:
    build:
      context: .
      dockerfile: Fin-Frontend/Dockerfile
    container_name: finmfb-frontend
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - api-gateway
    networks:
      - finmfb-network
  
  # Seq for centralized logging
  seq:
    image: datalust/seq:latest
    container_name: finmfb-seq
    environment:
      - ACCEPT_EULA=Y
    ports:
      - "5341:80"
    volumes:
      - seq-data:/data
    networks:
      - finmfb-network
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: finmfb-prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    ports:
      - "9090:9090"
    networks:
      - finmfb-network
  
  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: finmfb-grafana
    depends_on:
      - prometheus
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=GrafanaStrongPassword123!
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3000:3000"
    networks:
      - finmfb-network

networks:
  finmfb-network:
    driver: bridge

volumes:
  db-data:
  redis-data:
  rabbitmq-data:
  seq-data:
  prometheus-data:
  grafana-data: